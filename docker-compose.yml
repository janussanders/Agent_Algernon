services:
  qdrant:
    container_name: algernon-qdrant
    build:
      context: ./services/qdrant
      dockerfile: Dockerfile
    ports:
      - "6333:6333"  # HTTP port
      - "6334:6334"  # gRPC port
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT_ALLOW_RECOVERY=true
      - QDRANT_SERVICE_ENABLE_CORS=true
      - QDRANT_LOG_LEVEL=debug
    networks:
      - algernon_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/healthz"]
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  algernon:
    container_name: algernon-app
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8501:8501"
    environment:
      - QDRANT_HOST=algernon-qdrant
      - QDRANT_HTTP_PORT=6333
      - QDRANT_GRPC_PORT=6334
      - QDRANT_HTTPS=false
      - QDRANT_VERIFY_SSL=false
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - STREAMLIT_DEBUG=true
      - DEBUG=true
      - PYTHONPATH=/app
      - STREAMLIT_BROWSER_GATHER_USAGE_STATS=false
      - STREAMLIT_SERVER_MAX_UPLOAD_SIZE=200
      - STREAMLIT_SERVER_ENABLE_CORS=true
    volumes:
      - .:/app
      - /app/venv
    depends_on:
      qdrant:
        condition: service_healthy
    networks:
      - algernon_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

networks:
  algernon_network:
    driver: bridge

volumes:
  qdrant_data: 